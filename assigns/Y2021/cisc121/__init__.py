
# '''
#
# 简介：在本次作业中，您的任务是构建一个控制台版本的骰子游戏“四、五、六”。游戏的唯一要求是三个玩家，三个六面骰子，以及很多运气！
# 总体目标：“四、五、六”是一种赌博游戏，玩家在游戏的每一轮中相互下注。游戏的总体目标是通过掷出比对手更好的骰子组合来赢得赌注。游戏持续 15 轮，15 轮结束时银行中筹码最多的玩家获胜。
# 确定庄家：该游戏由三名玩家进行。其中一位玩家是银行家。游戏开始前，每位玩家掷一个骰子。掷出最高数字的玩家成为第一个庄家。
# 示例：假设玩家 1 掷出 6，玩家 2 掷出 2，玩家 3 掷出 5。因此，第一个庄家将是玩家 1。玩家 1 需要对其他两个玩家中的每一个下注。
# 庄家将继续担任庄家，直到另一个玩家掷出 4、5、6 个骰子组合。掷出 4、5、6 的玩家成为下一轮的庄家，直到另一个玩家掷出 4、5、6。
# 下注：庄家将在每一轮开始时与游戏中的其他每个玩家下注。可以在游戏开始时为玩家分配固定数量的筹码，或者只是继续让每个玩家能够下注任意数量的筹码。
# 示例：玩家 1 可以对玩家 2 下注 1 个筹码，对玩家 3 下注 1 个筹码。
# 结果：银行家将掷三个骰子。这是可能的三种结果以及导致每种结果的骰子组合的列表
#
# 在任何给定的回合中，如果有两名或更多玩家并列最高分，则需要重新掷骰。每个玩家重新掷骰，直到他们掷出一对 + 第三个骰子。
# 较高的第三个骰子总是获胜。例如，如果玩家 1 和玩家 2 打成平手，玩家 1 掷出 6、6、1，玩家 2 掷出 1、1、5，玩家 2
# 将获胜，因为第三个骰子 5 > 1。
# 如果在 15 轮结束后，两名或更多玩家的银行账户中有相同数量的筹码（无法确定获胜者），则继续游戏，直到有玩家领先并确定获胜者为止。
# 与电脑对战：为了让事情变得有趣，在我们的游戏版本中，游戏中的一名玩家将是电脑！您的游戏将有 2 名人类玩家和计算机。由于玩家在这款游戏中的成功很大程度上取决于他们的幸运程度，因此无需在计算机的游戏玩法中添加任何智能或策略。计算机的掷骰子和下注可以随机化。
# 玩家姓名：在游戏开始时，请提示用户输入姓名。而不是打印出诸如“轮到玩家 1 的回合……”或“玩家 1 掷骰子……”之类的信息，您的消息应该打印出“这是贝基的掷骰子……”或“贝基掷出的……”。
# 实现分配的提示：
# 您将需要使用 Python 的内置随机函数。查看此网站了解详情。
# 您可以选择使用字典来跟踪与每个玩家相关的信息。每个玩家都应该有自己的字典来存储与该玩家相关的数据，例如他们的姓名和分数。
# 当你在编程时，坐下来开始编码从来都不是一个好主意。规划您的解决方案非常重要。您的所有代码都必须封装在函数中。当您决定需要编写哪些函数时，请考虑您的程序需要完成的每个单独任务，以便完整地实现游戏。以下是一些帮助您入门的建议。您的程序需要能够完成的一些任务包括……掷骰子（在此作业的情况下，选择 1 到 6 之间的随机数）。重新掷骰子（如果需要，由于失误）。确定玩家是否掷出获胜组合。要求用户输入他们的赌注。
# 重要细节
# 您的所有代码都必须封装在函数中。 “main”函数将启动程序执行。未使用函数编写的解决方案不会获得及格分数。
# 你的程序必须有据可查。标记用于文档、整齐组织的代码、合适的变量名称等。请参阅程序样式指南以了解我们对正确文档的期望。
# 提交什么
# 你的程序应该放在一个单独的 Python 文件中。将此文件上传到 OnQ。
# 未能提交正确的文件将导致零分。请务必检查您提交的程序版本是否正确。
# 打标
# 作业将使用评分细则进行标记。
# 我不延长作业。每个人都可以延长 24 小时，但会受到惩罚（见标题）。请不要索取
# 另一个扩展，除非你有非常非常好的理由。
# '''

